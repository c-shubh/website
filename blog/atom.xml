<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cshubh.com/blog</id>
    <title>Shubh's Digital Garden Blog</title>
    <updated>2024-11-09T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cshubh.com/blog"/>
    <subtitle>Shubh's Digital Garden Blog</subtitle>
    <icon>https://cshubh.com/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[TIL Typo Tolerance in Passwords]]></title>
        <id>https://cshubh.com/blog/til-typo-tolerance-in-passwords</id>
        <link href="https://cshubh.com/blog/til-typo-tolerance-in-passwords"/>
        <updated>2024-11-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[TIL that some companies allow typo tolerance in passwords. Instead of simply rejecting a login attempt with small mistakes, they accept some common typos like an accidental uppercase or an extra character.]]></summary>
        <content type="html"><![CDATA[<p>TIL that some companies allow typo tolerance in passwords. Instead of simply rejecting a login attempt with small mistakes, they accept some common typos like an accidental uppercase or an extra character.</p>
<!-- -->
<p>Years ago, while logging into my Gmail (or was it Instagram?) account, I accidentally typed the first character of my password in uppercase, which was incorrect. But, surprisingly, it let me in! I vaguely remember trying a few other variations, like changing the case of a character in the middle of the password, and they worked too. At the time, I thought it was some bug or glitch and forgot about it.</p>
<p>Today, while binge-reading <a href="https://mtlynch.io/posts/" target="_blank" rel="noopener noreferrer">Michael Lynch's blog</a> and link-hopping, I came across <a href="https://news.ycombinator.com/item?id=13426544" target="_blank" rel="noopener noreferrer">this</a> HN post about mistyped passwords and how Facebook handles them:</p>
<div style="text-align:center"><p><img decoding="async" loading="lazy" alt="Our reply: Hi Christopher, We accept four forms of the user&amp;#39;s password to help overcome the most common reasons that authentic logins are rejected. In addition to the original password. we also accept the password if a user inadvertently has caps lock enabled, if their mobile device automatically capitalizes the first character of the password, or if an extra character is added to the end of the password. We feel this does not significantly impact the security of the user&amp;#39;s password or their account. Thanks. ~ Kurt, Security" src="https://cshubh.com/assets/images/C2dGvgvWEAAienm-3a551795013334ed0904ad6c2a3206aa.jpg" width="508" height="300" class="img_iSPq"></p></div>
<p>A <a href="https://news.ycombinator.com/item?id=13427958" target="_blank" rel="noopener noreferrer">comment</a> links to a research paper on typo-tolerant authentication schemes: <a href="http://www.arijuels.com/wp-content/uploads/2016/07/CAAJ16.pdf" target="_blank" rel="noopener noreferrer">pASSWORD tYPOS and How to Correct Them Securely</a>. How interesting!</p>
<p>So, next time you notice a site letting you in with common typos in your password, this could be at play! (or maybe their auth is broken <!-- -->:p<!-- -->)</p>]]></content>
        <author>
            <name>Shubh A Chudasama</name>
            <uri>/</uri>
        </author>
        <category label="TIL" term="TIL"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[TIL Pizza box servers]]></title>
        <id>https://cshubh.com/blog/til-pizza-box-servers</id>
        <link href="https://cshubh.com/blog/til-pizza-box-servers"/>
        <updated>2024-09-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[TIL that those flat servers used in data centers are called pizza box servers. I came across this term while reading Computer Networking: A Top-Down Approach 8th Edition.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" src="https://cshubh.com/assets/images/pizza-box-servers-6bcbd183f49b56a52f7168d2bfc3f51f.jpg" width="450" height="327" class="img_iSPq"></p>
<p>TIL that those flat servers used in data centers are called pizza box servers. I came across this term while reading <a href="https://gaia.cs.umass.edu/kurose_ross/index.php" target="_blank" rel="noopener noreferrer">Computer Networking: A Top-Down Approach 8th Edition</a>.</p>]]></content>
        <author>
            <name>Shubh A Chudasama</name>
            <uri>/</uri>
        </author>
        <category label="TIL" term="TIL"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Obfuscate email]]></title>
        <id>https://cshubh.com/blog/obfuscate-email</id>
        <link href="https://cshubh.com/blog/obfuscate-email"/>
        <updated>2024-08-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I was building contact page for this site where I've put up my email. How do I deal with bots harvesting plaintext emails from websites and sending spam?]]></summary>
        <content type="html"><![CDATA[<p>I was building <a href="https://cshubh.com/contact">contact page</a> for this site where I've put up my email. How do I deal with bots harvesting plaintext emails from websites and sending spam?</p>
<p>Initially I thought of using <a href="https://en.wikipedia.org/wiki/ROT13" target="_blank" rel="noopener noreferrer">rot13</a>, but rot13 of <em>gmail.com</em> is <em>tznvy.pbz</em>. A quick google search for <em>tznvy.pbz</em> showed a lot of hits which might mean that it's a widely known and used trick to obfuscate emails and, the bots are probably aware of it too. So I went with the classic <a href="https://en.wikipedia.org/wiki/Caesar_cipher" target="_blank" rel="noopener noreferrer">Caesar cipher</a>. The only downside is that it won't work with JS disabled.</p>]]></content>
        <author>
            <name>Shubh A Chudasama</name>
            <uri>/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TIL Brave bookmarks JSON file]]></title>
        <id>https://cshubh.com/blog/til-brave-bookmarks-json-file</id>
        <link href="https://cshubh.com/blog/til-brave-bookmarks-json-file"/>
        <updated>2024-08-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[TIL that browsers store all the bookmarks in a single JSON file.]]></summary>
        <content type="html"><![CDATA[<p>TIL that browsers store all the bookmarks in a single JSON file.<br>
<!-- -->Brave stores it at this path: <code>%LOCALAPPDATA%\BraveSoftware\Brave-Browser\User Data\Default\Bookmarks</code></p>
<p>This is particularly useful if you want to programmatically manipulate or work with your bookmarks.</p>
<p>See Stack Overflow: <a href="https://stackoverflow.com/questions/15017163/parser-for-exported-bookmarks-html-file-of-google-chrome-and-mozilla-in-java/15106289#15106289" target="_blank" rel="noopener noreferrer">Parser for Exported Bookmarks HTML file of Google Chrome and Mozilla in Java</a></p>]]></content>
        <author>
            <name>Shubh A Chudasama</name>
            <uri>/</uri>
        </author>
        <category label="TIL" term="TIL"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[TIL ArrayDeque hashCode and equals]]></title>
        <id>https://cshubh.com/blog/til-arraydeque-hashcode-and-equals</id>
        <link href="https://cshubh.com/blog/til-arraydeque-hashcode-and-equals"/>
        <updated>2024-08-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[TIL that LinkedList overrides equals and hashCode, but ArrayDeque doesn't!]]></summary>
        <content type="html"><![CDATA[<p>TIL that <code>LinkedList</code> overrides equals and hashCode, but ArrayDeque doesn't!</p>
<p>This means that regardless of the contents of <code>ArrayDeque</code>, it gives the same <code>hashCode</code> value.<br>
<!-- -->This bit me when using <code>Deque&lt;T&gt; dq = new ArrayDeque&lt;&gt;();</code></p>
<p>See Stack Overflow: <a href="https://stackoverflow.com/questions/18203855/why-doesnt-arraydeque-override-equals-and-hashcode/18203894#18203894" target="_blank" rel="noopener noreferrer">Why doesn't ArrayDeque override equals() and hashCode()?</a></p>]]></content>
        <author>
            <name>Shubh A Chudasama</name>
            <uri>/</uri>
        </author>
        <category label="TIL" term="TIL"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World!]]></title>
        <id>https://cshubh.com/blog/hello-world</id>
        <link href="https://cshubh.com/blog/hello-world"/>
        <updated>2024-08-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello World!]]></summary>
        <content type="html"><![CDATA[<p>Hello World!</p>
<p>I built my previous site using <a href="https://nextjs.org/" target="_blank" rel="noopener noreferrer">Next.js</a> and <a href="https://mui.com/" target="_blank" rel="noopener noreferrer">MUI</a>. The other day I set up a <a href="https://gohugo.io/" target="_blank" rel="noopener noreferrer">hugo</a> site for a friend. I have been planning to write and publish content on my website for a long time now, but never got around to do it. To reduce friction I decided to move to a platform where I don't have to worry about implementing all the basic blog functionality from scratch. After some research, I decided on <a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">Docusaurus</a>. Spent an evening setting it up and achieving feature parity with my previous site, making sure to not break any URLs. Lo and behold, my new site.</p>]]></content>
        <author>
            <name>Shubh A Chudasama</name>
            <uri>/</uri>
        </author>
    </entry>
</feed>